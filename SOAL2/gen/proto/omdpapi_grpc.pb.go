// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmdpServiceClient is the client API for OmdpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmdpServiceClient interface {
	ListMovie(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DetailMovie(ctx context.Context, in *RequestDetail, opts ...grpc.CallOption) (*ResponseDetail, error)
}

type omdpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmdpServiceClient(cc grpc.ClientConnInterface) OmdpServiceClient {
	return &omdpServiceClient{cc}
}

func (c *omdpServiceClient) ListMovie(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.OmdpService/ListMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omdpServiceClient) DetailMovie(ctx context.Context, in *RequestDetail, opts ...grpc.CallOption) (*ResponseDetail, error) {
	out := new(ResponseDetail)
	err := c.cc.Invoke(ctx, "/proto.OmdpService/DetailMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmdpServiceServer is the server API for OmdpService service.
// All implementations must embed UnimplementedOmdpServiceServer
// for forward compatibility
type OmdpServiceServer interface {
	ListMovie(context.Context, *Request) (*Response, error)
	DetailMovie(context.Context, *RequestDetail) (*ResponseDetail, error)
	mustEmbedUnimplementedOmdpServiceServer()
}

// UnimplementedOmdpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOmdpServiceServer struct {
}

func (UnimplementedOmdpServiceServer) ListMovie(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovie not implemented")
}
func (UnimplementedOmdpServiceServer) DetailMovie(context.Context, *RequestDetail) (*ResponseDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailMovie not implemented")
}
func (UnimplementedOmdpServiceServer) mustEmbedUnimplementedOmdpServiceServer() {}

// UnsafeOmdpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmdpServiceServer will
// result in compilation errors.
type UnsafeOmdpServiceServer interface {
	mustEmbedUnimplementedOmdpServiceServer()
}

func RegisterOmdpServiceServer(s grpc.ServiceRegistrar, srv OmdpServiceServer) {
	s.RegisterService(&OmdpService_ServiceDesc, srv)
}

func _OmdpService_ListMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdpServiceServer).ListMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OmdpService/ListMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdpServiceServer).ListMovie(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmdpService_DetailMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdpServiceServer).DetailMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OmdpService/DetailMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdpServiceServer).DetailMovie(ctx, req.(*RequestDetail))
	}
	return interceptor(ctx, in, info, handler)
}

// OmdpService_ServiceDesc is the grpc.ServiceDesc for OmdpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmdpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OmdpService",
	HandlerType: (*OmdpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMovie",
			Handler:    _OmdpService_ListMovie_Handler,
		},
		{
			MethodName: "DetailMovie",
			Handler:    _OmdpService_DetailMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omdpapi.proto",
}
